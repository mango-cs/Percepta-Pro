---
description:
globs:
alwaysApply: false
---
# Percepta Pro - Theme System & UI Consistency Rules

```yaml
alwaysApply: true
description: "Theme system and UI consistency standards for Percepta Pro Crimzon design"
filePatterns:
  - "src/themes/**/*.py"
  - "**/theme*.py"
  - "app/components/**/*.py"
  - "src/dashboard/**/*.py"
  - "crimzon_design_system*.json"
```

## Theme System Standards

### Color System Usage
- **ALWAYS** use theme variables instead of hardcoded colors
- Follow the Crimzon color palette consistently
- Implement proper contrast ratios for accessibility
- Support both light and dark mode themes

```python
# Crimzon Color Palette - Use these constants
CRIMZON_COLORS = {
    'primary': '#FF4757',        # Crimzon Red
    'secondary': '#FF6348',      # Crimzon Orange  
    'accent': '#2ED573',         # Success Green
    'warning': '#FFA502',        # Crimzon Amber
    'error': '#FF4757',          # Error Red
    'background_primary': '#1A1A1A',    # Dark Background
    'background_secondary': '#2D2D2D',  # Card Background
    'text_primary': '#FFFFFF',   # Primary Text
    'text_secondary': '#CCCCCC', # Secondary Text
    'text_muted': '#999999',     # Muted Text
    'border_color': '#404040'    # Border Color
}

def get_status_color(status: str) -> str:
    """Get color for status indicators."""
    status_colors = {
        'excellent': CRIMZON_COLORS['accent'],      # Green
        'good': CRIMZON_COLORS['accent'],
        'moderate': CRIMZON_COLORS['warning'],      # Amber
        'warning': CRIMZON_COLORS['warning'],
        'critical': CRIMZON_COLORS['error'],        # Red
        'crisis': CRIMZON_COLORS['error']
    }
    return status_colors.get(status.lower(), CRIMZON_COLORS['text_muted'])
```

### CSS Custom Properties
- Use CSS variables for consistent theming
- Implement proper cascade for theme inheritance
- Support runtime theme switching
- Maintain semantic naming conventions

```python
def generate_css_variables(theme_data: Dict[str, Any]) -> str:
    """Generate CSS custom properties from theme configuration."""
    
    css_vars = [":root {"]
    
    # Color variables
    colors = theme_data.get('colors', {})
    for color_name, color_value in colors.items():
        css_vars.append(f"  --color-{color_name.replace('_', '-')}: {color_value};")
    
    # Spacing variables
    spacing = theme_data.get('spacing', {})
    for size_name, size_value in spacing.items():
        css_vars.append(f"  --spacing-{size_name}: {size_value};")
    
    # Typography variables
    typography = theme_data.get('typography', {})
    for font_prop, font_value in typography.items():
        css_vars.append(f"  --font-{font_prop.replace('_', '-')}: {font_value};")
    
    # Shadow variables
    shadows = theme_data.get('shadows', {})
    for shadow_name, shadow_value in shadows.items():
        css_vars.append(f"  --shadow-{shadow_name}: {shadow_value};")
    
    css_vars.append("}")
    
    return "\n".join(css_vars)

# Example usage in Streamlit
def apply_crimzon_theme() -> None:
    """Apply Crimzon theme to Streamlit app."""
    theme_css = """
    <style>
    :root {
        --crimzon-red: #FF4757;
        --crimzon-orange: #FF6348;
        --crimzon-green: #2ED573;
        --crimzon-amber: #FFA502;
        --bg-primary: #1A1A1A;
        --bg-secondary: #2D2D2D;
        --text-primary: #FFFFFF;
        --text-secondary: #CCCCCC;
        --border-color: #404040;
    }
    
    /* Apply theme variables */
    .metric-card {
        background: var(--bg-secondary);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
    }
    
    .status-excellent { color: var(--crimzon-green); }
    .status-warning { color: var(--crimzon-amber); }
    .status-critical { color: var(--crimzon-red); }
    </style>
    """
    st.markdown(theme_css, unsafe_allow_html=True)
```

### Component Styling Standards
- Create reusable styled components
- Implement consistent spacing and typography
- Use theme-aware styling functions
- Support responsive design patterns

```python
def create_styled_metric_card(title: str, value: Union[str, int, float],
                            status: str = "neutral",
                            icon: str = "üìä",
                            show_trend: bool = False,
                            trend_value: Optional[str] = None) -> None:
    """Create consistently styled metric card with theme compliance."""
    
    status_color = get_status_color(status)
    trend_icon = "üìà" if trend_value and "+" in str(trend_value) else "üìâ" if trend_value and "-" in str(trend_value) else ""
    
    card_html = f"""
    <div class="metric-card" style="
        background: var(--bg-secondary);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    " onmouseover="this.style.transform='translateY(-2px)'; this.style.borderColor='var(--crimzon-red)';"
       onmouseout="this.style.transform='translateY(0)'; this.style.borderColor='var(--border-color)';">
        
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.5rem;">
            <span style="font-size: 1.2rem;">{icon}</span>
            {f'<span style="color: {status_color}; font-size: 0.8rem;">{trend_icon}</span>' if show_trend else ''}
        </div>
        
        <div style="color: var(--text-primary); font-size: 2rem; font-weight: 700; margin: 0.5rem 0;">
            {value}
        </div>
        
        <div style="color: var(--text-secondary); font-size: 0.9rem; font-weight: 500;">
            {title}
        </div>
        
        {f'<div style="color: {status_color}; font-size: 0.75rem; margin-top: 0.5rem;">{trend_value}</div>' if trend_value else ''}
    </div>
    """
    
    st.markdown(card_html, unsafe_allow_html=True)

def create_page_header(title: str, subtitle: str = "", 
                      show_mode_indicator: bool = True) -> None:
    """Create consistent page headers with theme styling."""
    
    mode_indicator = ""
    if show_mode_indicator and 'dashboard_mode' in st.session_state:
        mode = st.session_state.dashboard_mode
        mode_color = "var(--crimzon-red)" if mode == "Advanced" else "var(--text-muted)"
        mode_icon = "‚ö°" if mode == "Advanced" else "‚öôÔ∏è"
        mode_indicator = f"""
        <div style="
            display: inline-block;
            background: {mode_color}20;
            border: 1px solid {mode_color};
            border-radius: 20px;
            padding: 0.25rem 0.75rem;
            font-size: 0.7rem;
            font-weight: 600;
            color: {mode_color};
            margin-left: 1rem;
        ">
            {mode_icon} {mode.upper()}
        </div>
        """
    
    header_html = f"""
    <div style="margin-bottom: 2rem;">
        <h1 style="
            color: var(--text-primary);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        ">
            {title}
            {mode_indicator}
        </h1>
        {f'<p style="color: var(--text-secondary); font-size: 1.1rem; margin: 0;">{subtitle}</p>' if subtitle else ''}
    </div>
    """
    
    st.markdown(header_html, unsafe_allow_html=True)
```

### Chart Theming
- Apply consistent color schemes to all charts
- Use theme-aware chart templates
- Implement dark/light mode chart variations
- Maintain accessibility standards

```python
def get_plotly_theme_config(theme_mode: str = "dark") -> Dict[str, Any]:
    """Get Plotly theme configuration for consistent chart styling."""
    
    if theme_mode == "dark":
        return {
            'template': 'plotly_dark',
            'layout': {
                'paper_bgcolor': 'rgba(0,0,0,0)',
                'plot_bgcolor': 'rgba(0,0,0,0)',
                'font': {
                    'color': CRIMZON_COLORS['text_primary'],
                    'family': 'Inter, system-ui, sans-serif'
                },
                'colorway': [
                    CRIMZON_COLORS['primary'],    # Crimzon Red
                    CRIMZON_COLORS['accent'],     # Green
                    CRIMZON_COLORS['warning'],    # Amber
                    CRIMZON_COLORS['secondary'],  # Orange
                    '#3742FA',  # Blue
                    '#A55EEA',  # Purple
                    '#26D0CE',  # Cyan
                    '#FD79A8'   # Pink
                ]
            },
            'axes_config': {
                'showgrid': True,
                'gridcolor': 'rgba(255,255,255,0.1)',
                'zeroline': False,
                'tickfont': {'color': CRIMZON_COLORS['text_secondary']}
            }
        }
    else:
        # Light mode configuration
        return {
            'template': 'plotly_white',
            'layout': {
                'paper_bgcolor': 'white',
                'plot_bgcolor': 'white',
                'font': {
                    'color': '#2C3E50',
                    'family': 'Inter, system-ui, sans-serif'
                },
                'colorway': [
                    CRIMZON_COLORS['primary'],
                    CRIMZON_COLORS['accent'],
                    CRIMZON_COLORS['warning'],
                    CRIMZON_COLORS['secondary'],
                    '#3742FA', '#A55EEA', '#26D0CE', '#FD79A8'
                ]
            }
        }

def create_themed_chart(data: pd.DataFrame, chart_type: str, 
                       title: str, **kwargs) -> go.Figure:
    """Create chart with consistent Crimzon theming."""
    
    theme_config = get_plotly_theme_config()
    
    # Create chart based on type
    if chart_type == "line":
        fig = px.line(data, title=title, **kwargs)
    elif chart_type == "bar":
        fig = px.bar(data, title=title, **kwargs)
    elif chart_type == "scatter":
        fig = px.scatter(data, title=title, **kwargs)
    else:
        raise ValueError(f"Unsupported chart type: {chart_type}")
    
    # Apply theme
    fig.update_layout(
        template=theme_config['template'],
        paper_bgcolor=theme_config['layout']['paper_bgcolor'],
        plot_bgcolor=theme_config['layout']['plot_bgcolor'],
        font=theme_config['layout']['font'],
        title={
            'font': {'size': 18, 'color': CRIMZON_COLORS['text_primary']},
            'x': 0.02,
            'xanchor': 'left'
        },
        margin=dict(t=60, b=40, l=40, r=40),
        height=400
    )
    
    # Apply axis styling
    fig.update_xaxes(**theme_config['axes_config'])
    fig.update_yaxes(**theme_config['axes_config'])
    
    # Update color sequence
    if 'color_discrete_sequence' not in kwargs:
        fig.update_traces(
            line_color=CRIMZON_COLORS['primary'] if chart_type == "line" else None,
            marker_color=CRIMZON_COLORS['primary'] if chart_type in ["bar", "scatter"] else None
        )
    
    return fig
```

### Layout & Spacing
- Use consistent spacing scales
- Implement responsive grid systems
- Follow design system spacing guidelines
- Maintain visual hierarchy

```python
# Spacing scale based on design system
SPACING_SCALE = {
    'xs': '0.25rem',    # 4px
    'sm': '0.5rem',     # 8px
    'md': '1rem',       # 16px
    'lg': '1.5rem',     # 24px
    'xl': '2rem',       # 32px
    'xxl': '3rem',      # 48px
    'xxxl': '4rem'      # 64px
}

def create_responsive_layout(components: List[Dict[str, Any]], 
                           layout_type: str = "grid") -> None:
    """Create responsive layout with consistent spacing."""
    
    if layout_type == "grid":
        # Create responsive grid
        num_components = len(components)
        if num_components <= 2:
            cols = st.columns(num_components)
        elif num_components <= 4:
            cols = st.columns(2)
        else:
            cols = st.columns(3)
        
        for i, component in enumerate(components):
            col_index = i % len(cols)
            with cols[col_index]:
                render_component(component)
                
    elif layout_type == "stack":
        # Vertical stack with consistent spacing
        for i, component in enumerate(components):
            if i > 0:
                st.markdown(f'<div style="margin-top: {SPACING_SCALE["md"]};"></div>', 
                           unsafe_allow_html=True)
            render_component(component)

def add_spacing(size: str = "md") -> None:
    """Add consistent spacing between components."""
    spacing_value = SPACING_SCALE.get(size, SPACING_SCALE['md'])
    st.markdown(f'<div style="margin: {spacing_value} 0;"></div>', unsafe_allow_html=True)
```

### Accessibility Standards
- Ensure proper color contrast ratios
- Implement semantic HTML structure
- Support keyboard navigation
- Provide alternative text for visual elements

```python
def validate_color_contrast(foreground: str, background: str) -> Dict[str, Any]:
    """Validate color contrast ratio for accessibility."""
    # This would integrate with a color contrast library
    # For now, providing the structure
    
    # Calculate contrast ratio (implementation would use color parsing library)
    contrast_ratio = calculate_contrast_ratio(foreground, background)
    
    # WCAG guidelines
    aa_normal = contrast_ratio >= 4.5
    aa_large = contrast_ratio >= 3.0
    aaa_normal = contrast_ratio >= 7.0
    aaa_large = contrast_ratio >= 4.5
    
    return {
        'contrast_ratio': contrast_ratio,
        'wcag_aa_normal': aa_normal,
        'wcag_aa_large': aa_large,
        'wcag_aaa_normal': aaa_normal,
        'wcag_aaa_large': aaa_large,
        'recommendation': 'PASS' if aa_normal else 'FAIL'
    }

def create_accessible_button(label: str, onclick: callable,
                           variant: str = "primary",
                           disabled: bool = False) -> None:
    """Create accessible button with proper ARIA attributes."""
    
    variant_styles = {
        'primary': {
            'background': CRIMZON_COLORS['primary'],
            'color': CRIMZON_COLORS['text_primary'],
            'border': f"1px solid {CRIMZON_COLORS['primary']}"
        },
        'secondary': {
            'background': 'transparent',
            'color': CRIMZON_COLORS['primary'],
            'border': f"1px solid {CRIMZON_COLORS['primary']}"
        }
    }
    
    style = variant_styles.get(variant, variant_styles['primary'])
    
    if st.button(
        label,
        disabled=disabled,
        help=f"Click to {label.lower()}",
        use_container_width=True
    ):
        onclick()
```
