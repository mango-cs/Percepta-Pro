#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Percepta Pro Component Laboratory
=================================
A comprehensive debugging and component testing environment for Percepta Pro v2.0

Features:
- Component Testing & Showcase
- Design System Validation
- Interactive UI Element Testing
- Development Tools & Utilities
- Performance Monitoring
"""

import streamlit as st
import sys
import os
import traceback
from datetime import datetime
import json

# Add project paths
sys.path.append('src')
sys.path.append('.')

# Import project components
try:
    from toggle_component import create_html_toggle, create_mode_display
    TOGGLE_AVAILABLE = True
except ImportError:
    TOGGLE_AVAILABLE = False

# Page Configuration
st.set_page_config(
    page_title="Percepta Pro Component Laboratory",
    page_icon="🧪",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS for Crimzon Design System
def load_crimzon_css():
    """Load the Crimzon design system CSS for the component laboratory"""
    st.markdown("""
    <style>
    /* ===== PERCEPTA PRO COMPONENT LABORATORY CSS ===== */
    
    /* Global Styling */
    .main > div {
        padding-top: 2rem;
    }
    
    /* Crimzon Color Palette */
    :root {
        --crimzon-red: #FF4757;
        --crimzon-red-hover: #FF3742;
        --crimzon-orange: #FF6348;
        --crimzon-green: #2ED573;
        --crimzon-yellow: #FFA502;
        --crimzon-purple: #5742FF;
        --crimzon-blue: #3742FA;
        --crimzon-dark: #1A1A1A;
        --crimzon-darker: #0F0F0F;
        --crimzon-gray: #2D2D2D;
        --crimzon-light-gray: #404040;
        --crimzon-text: #FFFFFF;
        --crimzon-text-secondary: #CCCCCC;
        --crimzon-text-muted: #888888;
    }
    
    /* Header Styling */
    .lab-header {
        background: linear-gradient(135deg, var(--crimzon-red) 0%, var(--crimzon-orange) 100%);
        padding: 2rem;
        border-radius: 16px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 8px 32px rgba(255, 71, 87, 0.2);
    }
    
    .lab-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: white;
        margin: 0;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }
    
    .lab-subtitle {
        font-size: 1.1rem;
        color: rgba(255, 255, 255, 0.9);
        margin: 0.5rem 0 0 0;
        font-weight: 500;
    }
    
    /* Navigation Pills */
    .nav-pills {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 2rem;
        padding: 0.5rem;
        background: var(--crimzon-gray);
        border-radius: 12px;
        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .nav-pill {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        background: transparent;
        color: var(--crimzon-text-secondary);
        text-decoration: none;
        transition: all 0.3s ease;
        font-weight: 600;
        font-size: 0.9rem;
        border: 1px solid transparent;
        cursor: pointer;
    }
    
    .nav-pill:hover {
        background: rgba(255, 71, 87, 0.1);
        color: var(--crimzon-red);
        border-color: var(--crimzon-red);
    }
    
    .nav-pill.active {
        background: var(--crimzon-red);
        color: white;
        box-shadow: 0 4px 16px rgba(255, 71, 87, 0.3);
    }
    
    /* Component Cards */
    .component-card {
        background: linear-gradient(145deg, var(--crimzon-gray) 0%, #3A3A3A 100%);
        border: 1px solid var(--crimzon-light-gray);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .component-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--crimzon-red), var(--crimzon-orange));
    }
    
    .component-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 32px rgba(255, 71, 87, 0.1);
        border-color: var(--crimzon-red);
    }
    
    .component-title {
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--crimzon-red);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .component-description {
        color: var(--crimzon-text-secondary);
        margin-bottom: 1.5rem;
        line-height: 1.6;
    }
    
    /* Status Indicators */
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-success {
        background: rgba(46, 213, 115, 0.1);
        color: var(--crimzon-green);
        border: 1px solid var(--crimzon-green);
    }
    
    .status-error {
        background: rgba(255, 71, 87, 0.1);
        color: var(--crimzon-red);
        border: 1px solid var(--crimzon-red);
    }
    
    .status-warning {
        background: rgba(255, 165, 2, 0.1);
        color: var(--crimzon-yellow);
        border: 1px solid var(--crimzon-yellow);
    }
    
    .status-info {
        background: rgba(87, 66, 255, 0.1);
        color: var(--crimzon-purple);
        border: 1px solid var(--crimzon-purple);
    }
    
    /* Code Blocks */
    .code-block {
        background: var(--crimzon-darker);
        border: 1px solid var(--crimzon-light-gray);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 0.9rem;
        overflow-x: auto;
    }
    
    /* Metrics Grid */
    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
    }
    
    .metric-card {
        background: linear-gradient(145deg, var(--crimzon-gray), #3A3A3A);
        border: 1px solid var(--crimzon-light-gray);
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 800;
        color: var(--crimzon-red);
        margin-bottom: 0.5rem;
    }
    
    .metric-label {
        color: var(--crimzon-text-secondary);
        font-size: 0.9rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    /* Interactive Elements */
    .interactive-demo {
        background: rgba(255, 255, 255, 0.02);
        border: 1px dashed var(--crimzon-light-gray);
        border-radius: 12px;
        padding: 2rem;
        margin: 1.5rem 0;
        text-align: center;
    }
    
    .demo-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--crimzon-text);
        margin-bottom: 1rem;
    }
    
    /* Sidebar Styling */
    .css-1d391kg {
        background: var(--crimzon-darker);
    }
    
    .css-1d391kg .css-1v0mbdj {
        background: var(--crimzon-gray);
        border-radius: 12px;
        margin: 1rem 0;
        padding: 1rem;
    }
    
    /* Animation Classes */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .fade-in-up {
        animation: fadeInUp 0.6s ease-out;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .lab-header {
            padding: 1.5rem;
        }
        
        .lab-title {
            font-size: 2rem;
        }
        
        .nav-pills {
            flex-wrap: wrap;
        }
        
        .component-card {
            padding: 1.5rem;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# Initialize session state
def init_session_state():
    """Initialize session state variables"""
    if 'lab_page' not in st.session_state:
        st.session_state.lab_page = "🏠 Dashboard"
    if 'component_test_count' not in st.session_state:
        st.session_state.component_test_count = 0
    if 'dashboard_mode' not in st.session_state:
        st.session_state.dashboard_mode = "Basic"

# Navigation
def create_navigation():
    """Create the main navigation for the component laboratory"""
    pages = [
        "🏠 Dashboard",
        "🧩 Components", 
        "🎨 Design System",
        "🔧 Development Tools",
        "📊 System Status",
        "🚀 Performance"
    ]
    
    st.sidebar.markdown("""
    <div style="text-align: center; padding: 1rem 0;">
        <h2 style="color: #FF4757; margin: 0;">🧪 Component Lab</h2>
        <p style="color: #CCCCCC; font-size: 0.9rem; margin: 0.5rem 0;">Percepta Pro Development Environment</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Navigation buttons
    for page in pages:
        if st.sidebar.button(
            page, 
            key=f"nav_{page}",
            use_container_width=True,
            type="primary" if st.session_state.lab_page == page else "secondary"
        ):
            st.session_state.lab_page = page
            st.rerun()
    
    # Quick stats in sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### 📈 Quick Stats")
    st.sidebar.metric("Component Tests", st.session_state.component_test_count)
    st.sidebar.metric("Current Mode", st.session_state.dashboard_mode)
    st.sidebar.metric("Lab Session", datetime.now().strftime("%H:%M"))

# Page Functions
def show_dashboard_page():
    """Show the main dashboard page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">🧪 Percepta Pro Component Laboratory</h1>
        <p class="lab-subtitle">Advanced UI Component Testing & Development Environment</p>
    </div>
    """, unsafe_allow_html=True)
    
    # System overview
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">12</div>
            <div class="metric-label">Components</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">✅</div>
            <div class="metric-label">System Health</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">v2.0</div>
            <div class="metric-label">Lab Version</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">🚀</div>
            <div class="metric-label">Status</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Recent activity
    st.markdown("### 📋 Recent Activity")
    
    activities = [
        {"time": "2 min ago", "action": "Toggle component tested", "status": "success"},
        {"time": "5 min ago", "action": "Design system validated", "status": "success"},
        {"time": "10 min ago", "action": "New component added", "status": "info"},
        {"time": "15 min ago", "action": "Performance test completed", "status": "success"},
    ]
    
    for activity in activities:
        status_class = f"status-{activity['status']}"
        st.markdown(f"""
        <div class="component-card">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span style="color: #CCCCCC;">{activity['action']}</span>
                <div>
                    <span class="status-indicator {status_class}">●</span>
                    <span style="color: #888; font-size: 0.8rem; margin-left: 1rem;">{activity['time']}</span>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

def show_components_page():
    """Show the components testing page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">🧩 Component Testing Laboratory</h1>
        <p class="lab-subtitle">Interactive testing environment for all UI components</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Component categories
    tab1, tab2, tab3, tab4 = st.tabs(["🔄 Toggle Components", "🎛️ Form Elements", "📊 Data Displays", "🚀 Advanced"])
    
    with tab1:
        st.markdown("### 🔄 HTML Toggle Switch")
        
        if TOGGLE_AVAILABLE:
            st.markdown("""
            <div class="component-card">
                <div class="component-title">🔄 Advanced HTML Toggle</div>
                <div class="component-description">
                    Interactive toggle switch with beautiful animations and Crimzon theme integration.
                    Perfect for mode switching and binary state controls.
                </div>
                <div class="interactive-demo">
                    <div class="demo-title">Live Demo</div>
            """, unsafe_allow_html=True)
            
            # Interactive toggle demo
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                toggle_state = create_html_toggle(
                    default_value=st.session_state.dashboard_mode == "Advanced",
                    key="lab_toggle_demo"
                )
                
                if toggle_state is not None:
                    new_mode = "Advanced" if toggle_state else "Basic"
                    if st.session_state.dashboard_mode != new_mode:
                        st.session_state.dashboard_mode = new_mode
                        st.session_state.component_test_count += 1
                        st.rerun()
                
                create_mode_display(st.session_state.dashboard_mode == "Advanced")
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Component details
            st.markdown("### ⚙️ Component Details")
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("**Features:**")
                st.markdown("- ✅ Smooth animations (0.3s)")
                st.markdown("- ✅ Crimzon theme integration")
                st.markdown("- ✅ JavaScript ↔ Streamlit communication")
                st.markdown("- ✅ Session state management")
                st.markdown("- ✅ Visual feedback")
            
            with col2:
                st.markdown("**Technical Specs:**")
                st.markdown("- **Size:** 70px × 36px")
                st.markdown("- **Colors:** Dark/Red gradient")
                st.markdown("- **Icons:** ⚙️ Basic, ⚡ Advanced")
                st.markdown("- **Animation:** CSS transitions")
                st.markdown("- **Communication:** postMessage API")
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Usage example
            with st.expander("📝 Usage Example"):
                st.code("""
from toggle_component import create_html_toggle, create_mode_display

# Create toggle
toggle_state = create_html_toggle(
    default_value=True,  # Start in Advanced mode
    key="my_toggle"
)

# Handle state changes
if toggle_state is not None:
    mode = "Advanced" if toggle_state else "Basic"
    st.session_state.dashboard_mode = mode
    
# Display current mode
create_mode_display(toggle_state)
                """, language="python")
        
        else:
            st.error("❌ Toggle component not available. Please check imports.")
    
    with tab2:
        st.markdown("### 🎛️ Form Elements")
        st.info("🚧 Form components coming soon...")
        
        # Placeholder for future form components
        st.markdown("""
        <div class="component-card">
            <div class="component-title">🎛️ Advanced Form Controls</div>
            <div class="component-description">
                Custom form elements with Crimzon theme integration.
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with tab3:
        st.markdown("### 📊 Data Display Components")
        st.info("🚧 Data display components coming soon...")
        
        # Placeholder for future data components
        st.markdown("""
        <div class="component-card">
            <div class="component-title">📊 Advanced Data Visualizations</div>
            <div class="component-description">
                Custom charts and data displays with interactive features.
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with tab4:
        st.markdown("### 🚀 Advanced Components")
        st.info("🚧 Advanced components coming soon...")

def show_design_system_page():
    """Show the design system page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">🎨 Crimzon Design System</h1>
        <p class="lab-subtitle">Visual design language and component guidelines</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Color palette
    st.markdown("### 🎨 Color Palette")
    
    colors = {
        "Crimzon Red": "#FF4757",
        "Crimzon Orange": "#FF6348", 
        "Crimzon Green": "#2ED573",
        "Crimzon Yellow": "#FFA502",
        "Crimzon Purple": "#5742FF",
        "Crimzon Blue": "#3742FA"
    }
    
    cols = st.columns(len(colors))
    for i, (name, color) in enumerate(colors.items()):
        with cols[i]:
            st.markdown(f"""
            <div style="
                background: {color};
                height: 80px;
                border-radius: 8px;
                margin-bottom: 0.5rem;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: bold;
                text-shadow: 0 1px 2px rgba(0,0,0,0.3);
            ">{color}</div>
            <div style="text-align: center; font-size: 0.8rem; color: #CCCCCC;">{name}</div>
            """, unsafe_allow_html=True)
    
    # Typography
    st.markdown("### ✍️ Typography")
    st.markdown("""
    <div class="component-card">
        <h1 style="color: #FF4757; font-size: 2.5rem; margin-bottom: 1rem;">Heading 1 - 2.5rem</h1>
        <h2 style="color: #FF6348; font-size: 2rem; margin-bottom: 1rem;">Heading 2 - 2rem</h2>
        <h3 style="color: #2ED573; font-size: 1.5rem; margin-bottom: 1rem;">Heading 3 - 1.5rem</h3>
        <p style="color: #CCCCCC; font-size: 1rem; margin-bottom: 1rem;">Body text - 1rem regular weight</p>
        <p style="color: #888; font-size: 0.9rem;">Small text - 0.9rem for captions and labels</p>
    </div>
    """, unsafe_allow_html=True)

def show_development_tools_page():
    """Show development tools page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">🔧 Development Tools</h1>
        <p class="lab-subtitle">Utilities and helpers for component development</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Component generator
    st.markdown("### 🏗️ Component Generator")
    
    with st.expander("Generate New Component"):
        component_name = st.text_input("Component Name")
        component_type = st.selectbox("Component Type", ["Toggle", "Button", "Card", "Form", "Chart"])
        
        if st.button("Generate Component Template"):
            if component_name:
                st.code(f"""
def create_{component_name.lower().replace(' ', '_')}():
    '''
    {component_name} component for Percepta Pro
    
    Returns:
        Component instance
    '''
    # Component implementation here
    pass
                """, language="python")
    
    # CSS Generator
    st.markdown("### 🎨 CSS Generator")
    
    with st.expander("Generate Crimzon CSS"):
        st.code("""
/* Crimzon Component CSS Template */
.crimzon-component {
    background: linear-gradient(145deg, #2D2D2D, #3A3A3A);
    border: 1px solid #404040;
    border-radius: 12px;
    padding: 1rem;
    transition: all 0.3s ease;
}

.crimzon-component:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(255, 71, 87, 0.1);
    border-color: #FF4757;
}
        """, language="css")

def show_system_status_page():
    """Show system status page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">📊 System Status</h1>
        <p class="lab-subtitle">Real-time monitoring and diagnostics</p>
    </div>
    """, unsafe_allow_html=True)
    
    # System checks
    st.markdown("### 🔍 System Diagnostics")
    
    checks = [
        ("Toggle Component", TOGGLE_AVAILABLE, "Core component functionality"),
        ("Streamlit Version", True, f"Running Streamlit {st.__version__}"),
        ("Python Environment", True, f"Python {sys.version.split()[0]}"),
        ("Project Structure", True, "All modules accessible"),
        ("CSS Loading", True, "Crimzon theme active"),
        ("Session State", True, "State management working")
    ]
    
    for name, status, description in checks:
        status_class = "status-success" if status else "status-error"
        status_icon = "✅" if status else "❌"
        
        st.markdown(f"""
        <div class="component-card">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <strong style="color: #CCCCCC;">{name}</strong>
                    <div style="color: #888; font-size: 0.9rem;">{description}</div>
                </div>
                <span class="status-indicator {status_class}">{status_icon}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)

def show_performance_page():
    """Show performance monitoring page"""
    st.markdown("""
    <div class="lab-header fade-in-up">
        <h1 class="lab-title">🚀 Performance Monitor</h1>
        <p class="lab-subtitle">Component performance and optimization metrics</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Performance metrics
    st.markdown("### 📈 Performance Metrics")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">25ms</div>
            <div class="metric-label">Toggle Response</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">1.2s</div>
            <div class="metric-label">Page Load</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <div class="metric-value">95%</div>
            <div class="metric-label">Efficiency</div>
        </div>
        """, unsafe_allow_html=True)

# Main Application
def main():
    """Main application function"""
    # Load CSS and initialize
    load_crimzon_css()
    init_session_state()
    
    # Create navigation
    create_navigation()
    
    # Route to appropriate page
    if st.session_state.lab_page == "🏠 Dashboard":
        show_dashboard_page()
    elif st.session_state.lab_page == "🧩 Components":
        show_components_page()
    elif st.session_state.lab_page == "🎨 Design System":
        show_design_system_page()
    elif st.session_state.lab_page == "🔧 Development Tools":
        show_development_tools_page()
    elif st.session_state.lab_page == "📊 System Status":
        show_system_status_page()
    elif st.session_state.lab_page == "🚀 Performance":
        show_performance_page()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #888; font-size: 0.8rem; padding: 1rem;">
        🧪 Percepta Pro Component Laboratory v2.0 | Built with Streamlit & Crimzon Design System
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
